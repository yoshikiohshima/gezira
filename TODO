- stroke
    - what about Miter joins/caps?
        - process substitution based on arguments (like a 'round' flag)?
    - deal with degenerate input
    - fix compiler
        - unnecessary (->) at the end of single process substitution statements
        - support for field access in process substitution statement
        - epilogue temporary variables problem (see 'vv' variable)
        - input prefixing in prologue

- rasterizer
    - why is it so much slower for zoomed in snowflakes? Where is
      the time spent? (horizontal line optimization below helps some)
    - sortby is getting a reverse sorted stream (for x and/or y fields).
      we could change decomposebeziers to recurse in increasing x/y
      order (input prefixing)
    - optimization: skip horizontal lines during decomposition:
        if ¬(A.y = M.y ∧ M.y = C.y)
            << (M, B ~ C, C) << (A, A ~ B, M)
        or, add extra stage before decomposebeziers to check for
        horizontal lines
    - (see sortby optimization proposal in nile repo, which makes
       the shift copy happen as a group)
    - optimization: coerce edgecontributions (with the same x and y)
      into one, so that sortby can operate on fewer elements.
      We only need to look at pairs in a stream. How much
      difference does this make?
      Try this in decomposebezier and also as a separate process
    - optimization: how often do we get tiny beziers with
      endpoints on opposite sides of the pixel square? We currently split
      these, but could try not doing it (with effects on visual quality)
    - optimization: the createspans could avoid sending down spans of
      zero length or zero coverage (how much difference does this make?)

- compositing
    - should probably use capital letters for Color variables
    - CompositeInverse might need to unpremultiply the colors first,
      right now it only works on fully opaque images. The fact that
      it ignores the SOURCE pixels might mean that it shouldn't be
       compositor.
    - consider issue with compositors clamping color channels
      to 1 instead of clamping to the opacity (for Porter-Duff ops,
      this is not a problem). Maybe define a color operator that
      clamps alpha first, then uses that to clamp the other channels
      (like a ^ operator for color)
    - do any operators expect us to multiply the alpha in at the end?
    - add a "premultiply" and "unpremultiply" operator?

- Make general Gaussian blur

- Decimation filter

- Fix usage of '='. In bezier we want pairwise '=', in other
  places we want a scalar result. Perhaps define '=,=' or something
  for pairwise. Or '==' for the scalar result?

- stroking
    - change to new process execution serialization
    - Change miter join interface to _not_ use the inverse of
      the miter limit.
    - what about multple stroke paths rendered in one pipeline?
      Must determine the cap and join beziers differently, etc.
    - remove the harpoon operator (but to use '-', I need
      operator overloading to create a '-' operator that
      returns a Vector)

- dashed lines (input path -> output several paths to stroker)
- cubic >> quadratic bezier kernel
- more image effects

- CrazyOver (a : Real) : Color >> Color
    ∀ A
        AA = A / A.a
        {- B  = (1, 3 × AA.g / 4, (2 × AA.b + 1) / 4, (3 × AA.r + 1 ) / 4) : Color -}
        B  = (1, 3 × AA.g / 4, 3 × AA.b / 4, (3 × AA.r + 1 ) / 4) : Color
        {- B  = (1, AA.g, AA.b, AA.r) : Color -}
        {- B  = (1, 2 × AA.r / 3, (2 × AA.g + 1) / 3, (2 - AA.b) / 3) : Color -}
        {- B  = (1, |AA.r - 0.5|, |AA.g - 0.5|, 1 - |AA.b - 0.5|) : Color -}
        {- B  = (1, |AA.r - 0.5|, 1 - |AA.g - 0.5|, 1 - AA.b) : Color -}
        {- B  = (1, 1 - |AA.r - 0.5| - 0.16, |AA.g - 0.5| + 0.16, 1 - AA.b) : Color -}
        {- B  = (1, | (| 2 × AA.r - 0.5 |) - 1 |, | 2 × AA.g - 1 |, 1 - | 2 × AA.b - 1 |) : Color -}
        {- B = (1, (|2 × AA.r - 1| + 1) / 4, (|2 × AA.g - 1| + 1) / 4, (3 - |2 × AA.b - 1|) / 4) : Color -}
        {- B = (1, (AA.g + 1) / 4, (AA.b + 1) / 4, (3 - AA.r) / 4) : Color -}
        {- B = (1, AA.b / 2, AA.r / 2, 1 - AA.g / 2) : Color -}
        {- B = (1, AA.r / 2, AA.g / 2, 1 - AA.b) : Color -}
        C  = a × B + (1 - a) × AA
        >> (A.a, A.a × C.r, A.a × C.g, A.a × C.b)
